#include <RH_ASK.h>
#include <SPI.h>

// Sensor pins
const int alcoholSensorPin = A0;
const int wearSensorPin = A1;
const int sleepSensorPin = A2;
const int buzzerPin = 7;

// Drowsiness detection settings
const int drowsinessThreshold = 5;
const unsigned long drowsinessTimeWindow = 10000; // 10 seconds
const unsigned long resetTime = 5000;

unsigned long sleepTimestamps[drowsinessThreshold];
int sleepIndex = 0;
unsigned long lastSleepDetectionTime = 0;
bool isDrowsy = false;

// RF communication
RH_ASK rf_driver(2000, 11, 12, 0); // Data rate 2000bps, TX pin 12
unsigned long lastSendTime = 0;
const unsigned long sendInterval = 100; // Send every 100ms

void setup() {
  Serial.begin(9600);
  rf_driver.init();

  pinMode(wearSensorPin, INPUT);
  pinMode(alcoholSensorPin, INPUT);
  pinMode(sleepSensorPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  digitalWrite(buzzerPin, LOW);
}

void loop() {
  unsigned long currentMillis = millis();

  // Read sensors (assuming active LOW)
  int alcoholLevel = !digitalRead(alcoholSensorPin);
  int sleepSignal = !digitalRead(sleepSensorPin);
  int helmetStatus = !digitalRead(wearSensorPin);

  // Drowsiness detection
  if (sleepSignal) {
    lastSleepDetectionTime = currentMillis;
    sleepTimestamps[sleepIndex] = currentMillis;
    sleepIndex = (sleepIndex + 1) % drowsinessThreshold;

    int count = 0;
    for (int i = 0; i < drowsinessThreshold; i++) {
      if (currentMillis - sleepTimestamps[i] <= drowsinessTimeWindow) count++;
    }
    isDrowsy = (count >= drowsinessThreshold);
  }

  // Reset drowsiness if no recent sleep signals
  if (currentMillis - lastSleepDetectionTime > resetTime) {
    isDrowsy = false;
  }

  // Activate buzzer if drowsy
  digitalWrite(buzzerPin, isDrowsy ? HIGH : LOW);

  // Send data via RF
  if (currentMillis - lastSendTime >= sendInterval) {
    lastSendTime = currentMillis;
    String data = String(helmetStatus) + "," + String(alcoholLevel) + "," + String(isDrowsy ? 1 : 0);
    char msg[data.length() + 1];
    data.toCharArray(msg, data.length() + 1);
    rf_driver.send((uint8_t *)msg, strlen(msg));
    rf_driver.waitPacketSent();

    Serial.print("Sent: ");
    Serial.println(data);
  }

  delay(10); // Small delay to stabilize loop
}
